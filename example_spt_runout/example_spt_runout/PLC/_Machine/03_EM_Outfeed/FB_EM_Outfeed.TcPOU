<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EM_Outfeed" Id="{09a8e9a6-e811-47dc-affe-a728b4aadf7e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EM_Outfeed EXTENDS FB_PackML_BaseModule
VAR
	// Submodules
	
	// Components
	
	// Module Data
	// --Param
	// --Recipe
	// --HMI
	
	// Alarms
	
	// Other I/O
	
	// Miscellaneous
	ExecuteState: UDINT;
	Runout: BOOL;
	RunoutComplete: BOOL;
	tonRunout: TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="PackML" Id="{25aacabe-c380-40a5-9e9c-9ad0bfb36048}">
      <Folder Name="Acting States" Id="{a66f764a-2523-48b8-b8d8-4e878a5991db}" />
      <Folder Name="Waiting States" Id="{22a9f358-8a8e-47ae-b49d-68ac1598e22b}" />
    </Folder>
    <Folder Name="REFs" Id="{8ea2b359-101c-4ce0-b0fe-90ec00d314ab}" />
    <Method Name="Aborted" Id="{3a68740b-9e10-4057-b0e9-50981863b1d3}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Aborted
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Aborting" Id="{f843ae17-91b2-47bc-88e3-7f33c9425d7d}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Aborting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clearing" Id="{ea938460-0d57-45ff-8d41-bcb29a93ba61}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Clearing
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Clearing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Complete" Id="{f932fa8d-c0a1-4516-89fb-916e8a7e0b2f}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Complete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateEvents" Id="{830dce11-cff9-48b4-9541-29009a0de959}">
      <Declaration><![CDATA[//! @summary Initializes event function blocks using this module's name
METHOD PROTECTED CreateEvents

//! @description This method is called by <c>Initialize()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{c1dda021-6dba-4a67-9a47-a7de6044551c}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{ead3f37d-5bdc-42d6-83a5-8ad9134af8f1}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Execute
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE ExecuteState OF
			0:
				RunOut := FALSE;
				RunOutComplete := FALSE;
				tonRunOut.IN := FALSE;
				ExecuteState := ExecuteState + 10;
			10: // Production with Stopping Runout
				IF RunOut THEN
					tonRunOut.PT := T#10S;
					tonRunOut.IN := TRUE;
					IF tonRunOut.Q THEN
						RunOutComplete := TRUE;
					END_IF
				ELSE
					tonRunOut.IN := FALSE;
				END_IF

				
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Delay Runout
tonRunout();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Held" Id="{4de9c0b7-9e12-4a94-8628-52c14cdecf9d}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Held
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Holding" Id="{34dba468-47aa-4c42-9c9d-ac2bf601e705}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Holding
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Holding();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Idle" Id="{2fd35869-5c97-4cb7-a6a5-10d363d062bc}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Idle
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{18b656de-2a95-429b-8246-7bcc78cd2ff8}">
      <Declaration><![CDATA[//! @summary Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
	i						 : UDINT;
	varInfo					 : __SYSTEM.VAR_INFO;
	AllSubUnitsInitialized	 : BOOL := TRUE;
	AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0: // Initialize
        _LogModeChanges         := FALSE;
        _LogStateChanges        := FALSE;
        DescendantSequenceState := DescendantSequenceState + 10;
	
	10: // Register Submodules
		//RegisterSubmodule(submodule);
		DescendantSequenceState := DescendantSequenceState + 10;
    20: // Register Components
		//RegisterComponent(component);
        DescendantSequenceState := DescendantSequenceState + 10;
    30: // Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    40:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resetting" Id="{0743f721-6ce2-4194-b1f5-d872d4b5cb06}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Resetting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Resetting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting" Id="{886a78a6-cb0c-402f-8cb4-ac3704366f5e}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Starting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				ExecuteState := 0;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Starting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopped" Id="{22ea15bf-863f-4f03-8b78-fae6b6b2a826}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Stopped
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping" Id="{ad36b60f-5d8b-496f-9a7d-8bcbcf6b7657}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Stopping
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			
			10: // Wait for Runout to complete
				RunOut := TRUE;
				IF NOT RunOutComplete THEN
					THIS^.Execute();
				ELSE
					RunOutComplete := FALSE;
					DescendantSequenceState := DescendantSequenceState + 10;
				END_IF
				
			20:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Stopping();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspended" Id="{55a220c7-b1f9-4b56-87a8-6f6ad621dfdd}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Suspended
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspending" Id="{c96d28ac-1718-4104-85aa-0b2f5f7367d5}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Suspending
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Suspending();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Undefined" Id="{c2b611de-bd5a-4306-b8ad-a3a15076afca}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Undefined
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unholding" Id="{d976cd03-d4a3-4b14-9c9d-6094ac7fab8d}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Unholding
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Unholding();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unsuspending" Id="{d9727b20-2f58-4550-a3da-ad6a0712e212}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Unsuspending
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Unsuspending();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_EM_Outfeed">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Aborted">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Aborting">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Clearing">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Complete">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.CreateEvents">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.CyclicLogic">
      <LineId Id="70" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Execute">
      <LineId Id="22" Count="26" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Held">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Holding">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Idle">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Initialize">
      <LineId Id="12" Count="5" />
      <LineId Id="27" Count="3" />
      <LineId Id="18" Count="8" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Resetting">
      <LineId Id="6" Count="3" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Starting">
      <LineId Id="24" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Stopped">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Stopping">
      <LineId Id="24" Count="24" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Suspended">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Suspending">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Undefined">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Unholding">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Outfeed.Unsuspending">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>