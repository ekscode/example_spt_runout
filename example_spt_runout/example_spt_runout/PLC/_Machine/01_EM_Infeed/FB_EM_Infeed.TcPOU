<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EM_Infeed" Id="{0dc12d54-d787-435e-9263-f16d2b87e4f3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EM_Infeed EXTENDS FB_PackML_BaseModule
VAR
	// Submodules
	
	// Components
	
	// Module Data
	// --Param
	// --Recipe
	// --HMI
	
	// Alarms
	
	// Other I/O
	
	// Miscellaneous
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="PackML" Id="{9d1a3814-bba5-4eac-a4b5-1191307e9202}">
      <Folder Name="Acting States" Id="{0b50c69a-4191-47ee-8454-46ca3c866993}" />
      <Folder Name="Waiting States" Id="{13707769-7b7c-4b7e-abb0-3841028aae55}" />
    </Folder>
    <Folder Name="REFs" Id="{6518e437-fcba-457b-bacb-e7478f8fdb21}" />
    <Method Name="Aborted" Id="{ac9cbc68-abff-46ab-a354-f0562674dbcb}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Aborted
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Aborting" Id="{dca4c34c-0a3e-4aaa-a8f1-5c7ff8cab732}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Aborting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clearing" Id="{379b2710-976e-45da-ba4c-a24849191f1d}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Clearing
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Clearing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Complete" Id="{52a51e97-374d-4f37-8f55-3a511851f579}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Complete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateEvents" Id="{d8d2ffdd-6ce9-4335-bee0-adaa7a1b9bc2}">
      <Declaration><![CDATA[//! @summary Initializes event function blocks using this module's name
METHOD PROTECTED CreateEvents

//! @description This method is called by <c>Initialize()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{ac59ac91-f958-4517-9f96-2d5af3641726}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{1f9f4f4a-6bd1-48a0-bd67-39fe1316977f}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Execute
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Held" Id="{d237f26f-1aa6-4398-a879-95f4078dea53}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Held
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Holding" Id="{d56a9745-9fe7-44e9-99de-b05b387ff8e1}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Holding
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Holding();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Idle" Id="{362c48c1-830a-4c39-9336-9e44a70250e6}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Idle
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{cf9983a5-16aa-42cf-86de-19b6be1d7edc}">
      <Declaration><![CDATA[//! @summary Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
	i						 : UDINT;
	varInfo					 : __SYSTEM.VAR_INFO;
	AllSubUnitsInitialized	 : BOOL := TRUE;
	AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0: // Initialize
        _LogModeChanges         := FALSE;
        _LogStateChanges        := FALSE;
        DescendantSequenceState := DescendantSequenceState + 10;
	
	10: // Register Submodules
		//RegisterSubmodule(submodule);
		DescendantSequenceState := DescendantSequenceState + 10;
    20: // Register Components
		//RegisterComponent(component);
        DescendantSequenceState := DescendantSequenceState + 10;
    30: // Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    40:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resetting" Id="{15ea610e-2ff1-491f-8150-4877cf7462a8}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Resetting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Resetting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting" Id="{02491c10-4e5b-4198-8baa-a4c805e66a4f}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Starting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Starting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopped" Id="{933ebed7-d125-4b1a-8d68-daf62415c624}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Stopped
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping" Id="{d62c96e6-a37d-4353-ab0d-313e06fa4950}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Stopping
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Stopping();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspended" Id="{023d1df4-3332-426a-a4bf-55c12c36c496}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Suspended
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspending" Id="{4d0d5de9-50b2-4ec2-88de-6fbfe2599a1d}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Suspending
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Suspending();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Undefined" Id="{d3f7b9f5-042a-45b2-a885-ea09b6ab0609}" FolderPath="PackML\Waiting States\">
      <Declaration><![CDATA[METHOD PROTECTED Undefined
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unholding" Id="{c90d7040-c1c3-4e32-ab6b-eeffabb1eff8}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Unholding
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Unholding();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unsuspending" Id="{c64e293b-dc26-416d-84ea-ff1ec97b981d}" FolderPath="PackML\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Unsuspending
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
        CASE DescendantSequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				DescendantSequenceState := DescendantSequenceState + 10;
			10:
				StateTasksComplete := TRUE;
		END_CASE
		
	E_PMLUnitMode.ePMLUnitMode_Manual, E_PMLUnitMode.ePMLUnitMode_Maintenance:
        ;	
END_CASE

// Call Super
SUPER^.Unsuspending();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_EM_Infeed">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Aborted">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Aborting">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Clearing">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Complete">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.CreateEvents">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.CyclicLogic">
      <LineId Id="70" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Execute">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Held">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Holding">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Idle">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Initialize">
      <LineId Id="12" Count="5" />
      <LineId Id="27" Count="3" />
      <LineId Id="18" Count="8" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Resetting">
      <LineId Id="6" Count="3" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Starting">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Stopped">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Stopping">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Suspended">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Suspending">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Undefined">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Unholding">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EM_Infeed.Unsuspending">
      <LineId Id="6" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>